#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# This file is part of RSA.py testsuite.

"""Tests for our implementation of RSA applied to integers."""
import pytest
import RSA
from tests.pyrsa_testlib import with_params, without_duplicates, \
                                pytest_generate_tests

# ---------------------------- #
#  Create data for the tests.  #
# ---------------------------- #

# Helper function used below.
def b(x):
    return int(''.join(x.split()))

# Temporary definition, will be post-processed later.
integer_rsa_test_data = [

    # Inspired from http://en.wikipedia.org/wiki/RSA#A_worked_example
    dict(
        n = 3233,
        p = 61,
        q = 53,
        e = 17,
        d = 2753,
        _ = [
            dict(
                plain = 65,
                cypher = 2790,
            ),
            dict(
                plain = 65 + 3233 + 65 * 3233**2,
                cypher = 2790 + 3233 + 2790 * 3233**2,
            ),
        ]
    ),
    # Generated by http://critto.liceofoscarini.it/critto/rsa/rsa_demo.phtml
    dict(
        n = 31243,
        p = 157,
        q = 199,
        e = 5,
        d = 18533,
        _ = [
            dict(
                plain = 876,
                cypher = 20628,
            ),
            dict(
                # if plain = n + 1 ...
                plain = 31243,
                # ... we also expect that cypher = n + 1
                cypher = 31243,
            ),
            dict(
                plain = 876,
                cypher = 20628,
            ),
        ],
    ),
    # Generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    # Hmpf, that page doesn't allow the user to choose `e' ...
    dict(
        e = 17,
        n = 77028186510125710835232907121,
        p = 459983137786273,
        q = 167458717901777,
        d = 45310697947132401996104246513,
        _ = [
            dict(
                plain = 0,
                cypher = 0,
            ),
            dict(
                plain = 2,
                cypher = 2**17,
            ),
            dict(
                plain = 57128184570925880835232907122,
                cypher = 6764407817379484644525719120,
            ),
        ],
    ),
    # Again generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    dict(
        e = 19,
        n = b("""
            81921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421319267911017057
            92539724815773563824224453532477 """),
        p = b("""
            86076676546733337382541713532930911669195989929427722917
            74483174554334639686435205788216773797485261 """),
        q = b("""
            95172781525324761550958382729138993399010715034419778646
            91087067627598695056123147611078875505156657 """),
        d = b("""
            17246645750333258454988248457974461938532227470967377292
            84125878182705462171678767142303901562845674880626851687
            99905921783651713156251597987268518464404158865728125313
            38779996264720034637594768608539 """),
        plain = b("""
            80921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421519267911017057
            92539724815673563824224453532477 """),
        cypher = b("""
            22137228139183158439669852364694862732482535535249847884
            49720954411001899921124803798801814042011086202993150254
            88274823131673309070513331643338514100983106623894620132
            88855973653488072253714991211499 """),
    ),
    # Again generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    dict(
        e = 23,
        p = b("""
            28489954601611388619553404108203940433044351078137040591
            81494348969757053217922323275113898676968284552125125922
            10205434892574383192749047579813853880999080798598532792
            76819931119816921680155926991183 """),
        q = b("""
            95713753930524166760301951288420363242532132446588458509
            17739142065187781401349506282049076294091685319583133052
            87247143534507773905136325071665562455341347287680839410
            18182719419208882940511234327813 """),
        d = b("""
            13041602411536873177932324086839210387734974362170542711
            66728395507358393175602814613078571745764324534050035660
            86468406181261236084581223222122995388713066371305795169
            10072894507181649976873703098222095822748464720003353323
            80210382741738587322414769736017557941047540983521045905
            04008577459287464238373847186202413102516208255578101792
            87439570860532280811085803806118248747666021377185831065
            92821375 """),
        n = b("""
            27268805042304371190222132181572894447082219120902043851
            66795736060840276639896794190982468195689042207559165472
            71706667469909857267760739464438990358218229685457571717
            21061506696834359042554106478101987848286656679197173685
            14018333672765349975846516765319522575282480595708379610
            65211461298935757922835206921034565558318160810507009875
            19116036670176563942174778239541106498897980410343853445
            82672779 """),
        plain = b("""
            17236568092156731408297766119418017537869114208028080487
            09504214099597921367850945315474143925943532423516957495
            47212623857652061972441899562100158646230426553421519267
            91101705792539724815673563824224453532477555555555555555
            5588 """),
        cypher = b("""
            11249617172664411689713341259914189929078337526026500935
            12409469092809495376007898985547994042625180666716133109
            95539518373396124849705037687042903923722455371479737993
            13648904557753881822947487721378328739353698883280317580
            69913965098694112170747628063215395274847497730954321064
            35460126918014608277779654751194830369137001589355278527
            09123928225566443501117814878716331456545617304487076719
            40798934 """),
    ),
    # Generated by http://islab.oregonstate.edu/koc/ece575/02Project/Mor/
    dict(
        e = 11003726294547297341,
        p = b("""
            39922612611027959996394545074456026825528070497539331989
            65522778701176759774228164458929820969741232235437307666
            098693849666316699040528739377011697295297 """),
        q = b("""
            17777172157443534741640362925797767962391967472203175519
            74208260988332940678809197918545764552224898846609386062
            0045629916088136348616227187589818338698353 """),
        n = b("""
            70971115736117038726645550808214912052317223150289444865
            68850452716884464912432452157422271636962314705740044261
            09383333023987136931631791015636064727390811662234936898
            62980829299505605287443573845147749776913677674203657688
            18809998100337646576854750161941304168537597552264512727
            1366940074964421597648545841 """),
        d = b("""
            63351870184876835585431387724817307426653355312934254433
            98757481676594836161596022553903775439617937319209185623
            43814069463941935041290726073178588924673147237234343289
            30934984753958699188098524755853400102146423188123417706
            69378009436948246256883151445897872307080823304524583421
            292732722435687824755422997 """),
        plain = b("""
            10011111101111000111101110000110011011011110110100000011
            10010011111000010011001011111011111101011010101100000111
            00000000010001101001101101011101010111000011111100001000
            11000010100101101101000110001101100111010111110100111100
            1000000010000110111101011011 """),
        cypher = b("""
            47367835209253383690467819493169886887363241045271912689
            00355152276480321075665546480570294956458929661801603950
            24876056438618301000575546096514331576813852538215249532
            73808652801320737566945327931249420476155674199927579554
            28425032803368870575661629088046064627442091904639948150
            9435413073426075477158765398 """),
    ),

    # With help of http://islab.oregonstate.edu/koc/ece575/02Project/Mor/
    # Also check some corner cases.
    dict(
        p = 2**2281 - 1,
        q = 2**2203 - 1,
        n = b("""
            65841627483018454412502751992144351578988826415607473309
            92440401262136824977140327981163992881765024628292557845
            25977722903018714434309698108208388664768262754316426220
            65157662373161788292316411757962482726124450608427437125
            02778493516316794411710184180184980399964725498931505771
            89302871520311715179730714312181456245097848491669795997
            28983061298805852396838480882282837090019848924924339916
            51252192447537907797644662369651357935765161932131750614
            01667388622228362042717054014679032953441034021506856017
            08106261757235119541850589938871570979599202955904211978
            34235973247071006940646759092387175730587641188932251116
            02703838080618565401139902143069901117174204252871948846
            86443677180861643245710284453484385719873524200530907393
            90514337909467266722346432593495351862685716290779375978
            38801337973092285608744209951533199868228040004432132597
            07339036335789237999765587885769633489221634507022764674
            98513812085540449404441828640265137094498234895934390173
            66358869648168238735087593808344484365136284219725233811
            60533181500742458289082188726068288663254361310925286211
            43263720777853692925709005948144810974437812695626473036
            71428895764224084402259605109600363098950091998891375812
            83952361329566725381397843487917278121728565289546919418
            12183430787545016947465987382152437697479565725559895945
            98180639098344891175879455994652382137038240166358066403
            475457 """),
        e = 2**61 - 1,
        d = b("""
            37360461576470193792755230155076355802719155079439668809
            42901857322953655357265449569410471277425952744591930151
            81479884225628326441864809144445285561557567961426145593
            46389127385100140205973783125054503168459143801761918608
            21156821764250727390682763721396004915954955378807960485
            01601790999155838558749887619914020288310736022122841400
            12044396491316050378448459156217407765728078044599101398
            24269020120573309609688013830247299226572669368498134939
            13672247686280845821675257281318685404923028201778243992
            25506622598377602496357195958818323184574859781476700100
            81548214534254548751034452349822453541040792714374226926
            97556950591749036381649031772019438708520207645271285833
            81025874143923923286512229081316835827608115843952052020
            20939181871755469791156943978028386189768220475637345847
            39480796023845386548285274720892293514698570156055782459
            21902634623286894756283067095895436413579877873023753759
            35380670268539194587172110335901947278110585512880442871
            87778552126973545907790765753449566536974420096362934566
            26678096761919984119439584511111845269398239585173871776
            20050000059715276472111300380332222777609081806117725380
            35705792669836348965460790910065700480584701557479927421
            63288165678625664044418635474709624629757918820674173872
            69539539487253279387666259151375959020761891475828653180
            86912314710413714271658174241059221078105192161128780960
            995951 """),
        _ = [
            dict(
                plain = 1,
                cypher = 1,
            ),
            dict(
                # if plain = n + 1 ...
                plain = 2**4484 - 2**2281 - 2**2203 + 2,
                # ... we also expect that cypher = n + 1
                cypher= 2**4484 - 2**2281 - 2**2203 + 2,
            ),
            dict(
                # We should work correctly even if the message is not
                # coprime with n.
                plain = 2**2281 - 1,
                cypher = b("""
                    640061972037093167636558270100139108712369267897
                    169070438891215707482244962393307421036022966093
                    171525790720912529525208236195591994399606764414
                    667052689699597644707387251579059824583202620366
                    624568044047189018477774569237057984312758300468
                    647660060547039201938656675776829868870111548862
                    963408700634443762843535194017525863047464131469
                    737571996543648853035295950268334373320658101657
                    032037374585564650676647903541268849934046871724
                    964383676871027164580939037756511161085906798072
                    266989282710886895298330499675775133331041854614
                    699633235033862169196611036775505459393484389784
                    535797018837826531517104557019817271186955943673
                    011402080468038732281704158574887592174157582382
                    552764025077596246395806065066356144886029698406
                    052531346700276857150454156204209493833592611276
                    888027104925358078867028946530274102411281168141
                    177020173605372050120122515510144101888068611672
                    259179745603938958760734685073657323198650655769
                    840690325153885201634266478132047556030315401289
                    827833189030101774143180468393071353273899920089
                    978062483112024452001739059601426771737454874680
                    475996156242111493699523895107019786963547005804
                    545235535165381345178043394043270042857642881025
                    267917608602596269142256184915821092621699050051
                    086044532654144866347347099452007408526905612788
                    842555314231127906237465229141597849471962808393
                    653240794508699977270999861077998149018882121581
                    684216 """),
                ),
            dict(
                plain = 3**2000,
                cypher = b("""
                    233809301053491252688030600443670530842394086866
                    430960416605728469810811696508390132960387214408
                    615701257439084340027749781724406984689209417293
                    472019451589843933378306480165645864951895113609
                    011960106369048974775114147642802130264712116801
                    486685569327067201335629940087720970238528254365
                    861134768622625019693740671381645690866223309522
                    423532714641432445793569630739992483408549839487
                    279912693187781651458009926142300626959206119949
                    977103526056837098292877997996647714045483172710
                    437465562452148418493083466473472974976499414197
                    860960257242683231098232405437929111953671965237
                    331880069844627496636645312877617494480675629912
                    138526026279186847647760470021217081311773422918
                    185541180221210037511965108977703120610133313896
                    877803420683681495235881572188532417692809395956
                    458791646978084413996027835391671951675062145308
                    353495429027206728691825034752726484426528827489
                    801042148286011444020204993808862425363173235142
                    958127996462264497564891846780380142781905119467
                    970564345662126072943587606217399625375390463178
                    418233487040105054687814045193516588595223007117
                    152407905454390198455977934699590584247116131424
                    895920491121462359579252806685227660900388412508
                    465521621753242395314849408901024863482759944125
                    025263347166077388947432501780663844879403271266
                    975405379141297546816678258472342336896979412551
                    760711555160570273935158178609175610134979836216
                    057998 """),
            ),
        ],
    ),
] # integer_rsa_test_data

def unravel_rsa_test_data(data):
    unravelled_test_data = []
    for data_clump in data:
        try:
            plain_encrypted_couples_list = data_clump['_']
        except KeyError:
            # There's only one datum in the clump.  Register it.
            unravelled_test_data.append(data_clump)
        else:
            # Unravel the data contained in the clump, and register each of
            # them singularly.
            del data_clump['_']
            for d in plain_encrypted_couples_list:
                unravelled_test_data.append(
                    dict(data_clump, plain=d['plain'], cypher=d['cypher']))
    return unravelled_test_data

integer_rsa_test_data = unravel_rsa_test_data(integer_rsa_test_data)

# -------------------- #
#  Go with the tests.  #
# -------------------- #

@with_params(integer_rsa_test_data)
def test_build_key(n, p, q, e, d, plain, cypher):
    key = RSA.PrivateKey(p, q, e)
    assert key.n == n and key.d == d

@with_params(integer_rsa_test_data)
def test_encrypt_pubkey(n, p, q, e, d, plain, cypher):
    encrypter = RSA.IntegerEncrypter(RSA.PublicKey(n, e))
    assert encrypter.encrypt(plain) == cypher

@with_params(integer_rsa_test_data)
def test_encrypt_privkey(n, p, q, e, d, plain, cypher):
    encrypter = RSA.IntegerEncrypter(RSA.PrivateKey(p, q, e))
    assert encrypter.encrypt(plain) == cypher

@with_params(integer_rsa_test_data)
def test_decrypt(n, p, q, e, d, plain, cypher):
    decrypter = RSA.IntegerDecrypter(RSA.PrivateKey(p, q, e))
    assert decrypter.decrypt(cypher) == plain

# vim: et sw=4 ts=4 ft=python
