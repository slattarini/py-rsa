#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# This file is part of RSA.py testsuite.

"""Tests for our implementation of RSA applied to integers."""
import pytest
import RSA
from tests.pyrsa_testlib import with_params, without_duplicates, \
                                pytest_generate_tests

# Helper function used below.
def b(x):
    return int(''.join(x.split()))

@with_params([
    # Stolen from http://en.wikipedia.org/wiki/RSA#A_worked_example
    dict(
        n = 3233,
        p = 61,
        q = 53,
        e = 17,
        d = 2753,
        plain = 65,
        cypher = 2790,
    ),
    # Generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    # Hmpf, that page doesn't allow the user to selcet `e' ...
    dict(
        e = 17,
        n = 77028186510125710835232907121,
        p = 459983137786273,
        q = 167458717901777,
        d = 45310697947132401996104246513,
        plain = 57128184570925880835232907122,
        cypher = 6764407817379484644525719120,
    ),
    dict(
        e = 19,
        n = b("""
            81921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421319267911017057
            92539724815773563824224453532477 """),
        p = b("""
            86076676546733337382541713532930911669195989929427722917
            74483174554334639686435205788216773797485261 """),
        q = b("""
            95172781525324761550958382729138993399010715034419778646
            91087067627598695056123147611078875505156657 """),
        d = b("""
            17246645750333258454988248457974461938532227470967377292
            84125878182705462171678767142303901562845674880626851687
            99905921783651713156251597987268518464404158865728125313
            38779996264720034637594768608539 """),
        plain = b("""
            80921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421519267911017057
            92539724815673563824224453532477 """),
        cypher = b("""
            22137228139183158439669852364694862732482535535249847884
            49720954411001899921124803798801814042011086202993150254
            88274823131673309070513331643338514100983106623894620132
            88855973653488072253714991211499 """),
    ),
    dict(
        e = 23,
        p = b("""
            28489954601611388619553404108203940433044351078137040591
            81494348969757053217922323275113898676968284552125125922
            10205434892574383192749047579813853880999080798598532792
            76819931119816921680155926991183 """),
        q = b("""
            95713753930524166760301951288420363242532132446588458509
            17739142065187781401349506282049076294091685319583133052
            87247143534507773905136325071665562455341347287680839410
            18182719419208882940511234327813 """),
        d = b("""
            13041602411536873177932324086839210387734974362170542711
            66728395507358393175602814613078571745764324534050035660
            86468406181261236084581223222122995388713066371305795169
            10072894507181649976873703098222095822748464720003353323
            80210382741738587322414769736017557941047540983521045905
            04008577459287464238373847186202413102516208255578101792
            87439570860532280811085803806118248747666021377185831065
            92821375 """),
        n = b("""
            27268805042304371190222132181572894447082219120902043851
            66795736060840276639896794190982468195689042207559165472
            71706667469909857267760739464438990358218229685457571717
            21061506696834359042554106478101987848286656679197173685
            14018333672765349975846516765319522575282480595708379610
            65211461298935757922835206921034565558318160810507009875
            19116036670176563942174778239541106498897980410343853445
            82672779 """),
        plain = b("""
            17236568092156731408297766119418017537869114208028080487
            09504214099597921367850945315474143925943532423516957495
            47212623857652061972441899562100158646230426553421519267
            91101705792539724815673563824224453532477555555555555555
            5588 """),
        cypher = b("""
            11249617172664411689713341259914189929078337526026500935
            12409469092809495376007898985547994042625180666716133109
            95539518373396124849705037687042903923722455371479737993
            13648904557753881822947487721378328739353698883280317580
            69913965098694112170747628063215395274847497730954321064
            35460126918014608277779654751194830369137001589355278527
            09123928225566443501117814878716331456545617304487076719
            40798934 """),
    ),
])
def test_sample(n, p, q, e, d, plain, cypher):
    key = RSA.PrivateKey(p, q, e)
    if n is not None:
        assert key.n == n
    assert key.d == d
    encrypter_priv = RSA.IntegerEncrypter(key)
    encrypter_pub = RSA.IntegerEncrypter(key.public())
    decrypter = RSA.IntegerDecrypter(key)
    assert (encrypter_priv.encrypt(plain) == cypher
            and encrypter_pub.encrypt(plain) == cypher
            and decrypter.decrypt(cypher) == plain)


# The list of known values has been obtained thanks to:
#  http://www.hanewin.net/encrypt/rsa/rsa-test.htm

# vim: et sw=4 ts=4 ft=python
