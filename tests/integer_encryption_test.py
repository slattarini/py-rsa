#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
# This file is part of RSA.py testsuite.

"""Tests for our implementation of RSA applied to integers."""
import pytest
import RSA
from tests.pyrsa_testlib import with_params, without_duplicates, \
                                pytest_generate_tests

# Helper function used below.
def b(x):
    return int(''.join(x.split()))

@with_params([

    # Stolen from http://en.wikipedia.org/wiki/RSA#A_worked_example
    dict(
        n = 3233,
        p = 61,
        q = 53,
        e = 17,
        d = 2753,
        plain = 65,
        cypher = 2790,
    ),
    # Generated by http://critto.liceofoscarini.it/critto/rsa/rsa_demo.phtml
    dict(
        n = 31243,
        p = 157,
        q = 199,
        e = 5,
        d = 18533,
        plain = 876,
        cypher = 20628,
    ),
    # Generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    # Hmpf, that page doesn't allow the user to selcet `e' ...
    dict(
        e = 17,
        n = 77028186510125710835232907121,
        p = 459983137786273,
        q = 167458717901777,
        d = 45310697947132401996104246513,
        plain = 57128184570925880835232907122,
        cypher = 6764407817379484644525719120,
    ),
    # Again generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    dict(
        e = 19,
        n = b("""
            81921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421319267911017057
            92539724815773563824224453532477 """),
        p = b("""
            86076676546733337382541713532930911669195989929427722917
            74483174554334639686435205788216773797485261 """),
        q = b("""
            95172781525324761550958382729138993399010715034419778646
            91087067627598695056123147611078875505156657 """),
        d = b("""
            17246645750333258454988248457974461938532227470967377292
            84125878182705462171678767142303901562845674880626851687
            99905921783651713156251597987268518464404158865728125313
            38779996264720034637594768608539 """),
        plain = b("""
            80921567314082977661194180175378694208028080487095042140
            99597921367850945315474143925943532423516957495472126238
            57652061972441899562100158646230426553421519267911017057
            92539724815673563824224453532477 """),
        cypher = b("""
            22137228139183158439669852364694862732482535535249847884
            49720954411001899921124803798801814042011086202993150254
            88274823131673309070513331643338514100983106623894620132
            88855973653488072253714991211499 """),
    ),
    # Again generated by http://people.eku.edu/styere/Encrypt/RSAdemo.html
    dict(
        e = 23,
        p = b("""
            28489954601611388619553404108203940433044351078137040591
            81494348969757053217922323275113898676968284552125125922
            10205434892574383192749047579813853880999080798598532792
            76819931119816921680155926991183 """),
        q = b("""
            95713753930524166760301951288420363242532132446588458509
            17739142065187781401349506282049076294091685319583133052
            87247143534507773905136325071665562455341347287680839410
            18182719419208882940511234327813 """),
        d = b("""
            13041602411536873177932324086839210387734974362170542711
            66728395507358393175602814613078571745764324534050035660
            86468406181261236084581223222122995388713066371305795169
            10072894507181649976873703098222095822748464720003353323
            80210382741738587322414769736017557941047540983521045905
            04008577459287464238373847186202413102516208255578101792
            87439570860532280811085803806118248747666021377185831065
            92821375 """),
        n = b("""
            27268805042304371190222132181572894447082219120902043851
            66795736060840276639896794190982468195689042207559165472
            71706667469909857267760739464438990358218229685457571717
            21061506696834359042554106478101987848286656679197173685
            14018333672765349975846516765319522575282480595708379610
            65211461298935757922835206921034565558318160810507009875
            19116036670176563942174778239541106498897980410343853445
            82672779 """),
        plain = b("""
            17236568092156731408297766119418017537869114208028080487
            09504214099597921367850945315474143925943532423516957495
            47212623857652061972441899562100158646230426553421519267
            91101705792539724815673563824224453532477555555555555555
            5588 """),
        cypher = b("""
            11249617172664411689713341259914189929078337526026500935
            12409469092809495376007898985547994042625180666716133109
            95539518373396124849705037687042903923722455371479737993
            13648904557753881822947487721378328739353698883280317580
            69913965098694112170747628063215395274847497730954321064
            35460126918014608277779654751194830369137001589355278527
            09123928225566443501117814878716331456545617304487076719
            40798934 """),
    ),
    # Generated by http://islab.oregonstate.edu/koc/ece575/02Project/Mor/
    dict(
        e = 11003726294547297341,
        p = b("""
            39922612611027959996394545074456026825528070497539331989
            65522778701176759774228164458929820969741232235437307666
            098693849666316699040528739377011697295297 """),
        q = b("""
            17777172157443534741640362925797767962391967472203175519
            74208260988332940678809197918545764552224898846609386062
            0045629916088136348616227187589818338698353 """),
        n = b("""
            70971115736117038726645550808214912052317223150289444865
            68850452716884464912432452157422271636962314705740044261
            09383333023987136931631791015636064727390811662234936898
            62980829299505605287443573845147749776913677674203657688
            18809998100337646576854750161941304168537597552264512727
            1366940074964421597648545841 """),
        d = b("""
            63351870184876835585431387724817307426653355312934254433
            98757481676594836161596022553903775439617937319209185623
            43814069463941935041290726073178588924673147237234343289
            30934984753958699188098524755853400102146423188123417706
            69378009436948246256883151445897872307080823304524583421
            292732722435687824755422997 """),
        plain = b("""
            10011111101111000111101110000110011011011110110100000011
            10010011111000010011001011111011111101011010101100000111
            00000000010001101001101101011101010111000011111100001000
            11000010100101101101000110001101100111010111110100111100
            1000000010000110111101011011 """),
        cypher = b("""
            47367835209253383690467819493169886887363241045271912689
            00355152276480321075665546480570294956458929661801603950
            24876056438618301000575546096514331576813852538215249532
            73808652801320737566945327931249420476155674199927579554
            28425032803368870575661629088046064627442091904639948150
            9435413073426075477158765398 """),
    ),

    # With help of http://islab.oregonstate.edu/koc/ece575/02Project/Mor/
    dict(
        p = 2**2281 - 1,
        q = 2**2203 - 1,
        n = b("""
            65841627483018454412502751992144351578988826415607473309
            92440401262136824977140327981163992881765024628292557845
            25977722903018714434309698108208388664768262754316426220
            65157662373161788292316411757962482726124450608427437125
            02778493516316794411710184180184980399964725498931505771
            89302871520311715179730714312181456245097848491669795997
            28983061298805852396838480882282837090019848924924339916
            51252192447537907797644662369651357935765161932131750614
            01667388622228362042717054014679032953441034021506856017
            08106261757235119541850589938871570979599202955904211978
            34235973247071006940646759092387175730587641188932251116
            02703838080618565401139902143069901117174204252871948846
            86443677180861643245710284453484385719873524200530907393
            90514337909467266722346432593495351862685716290779375978
            38801337973092285608744209951533199868228040004432132597
            07339036335789237999765587885769633489221634507022764674
            98513812085540449404441828640265137094498234895934390173
            66358869648168238735087593808344484365136284219725233811
            60533181500742458289082188726068288663254361310925286211
            43263720777853692925709005948144810974437812695626473036
            71428895764224084402259605109600363098950091998891375812
            83952361329566725381397843487917278121728565289546919418
            12183430787545016947465987382152437697479565725559895945
            98180639098344891175879455994652382137038240166358066403
            475457 """),
        e = 2**61 - 1,
        d = b("""
            37360461576470193792755230155076355802719155079439668809
            42901857322953655357265449569410471277425952744591930151
            81479884225628326441864809144445285561557567961426145593
            46389127385100140205973783125054503168459143801761918608
            21156821764250727390682763721396004915954955378807960485
            01601790999155838558749887619914020288310736022122841400
            12044396491316050378448459156217407765728078044599101398
            24269020120573309609688013830247299226572669368498134939
            13672247686280845821675257281318685404923028201778243992
            25506622598377602496357195958818323184574859781476700100
            81548214534254548751034452349822453541040792714374226926
            97556950591749036381649031772019438708520207645271285833
            81025874143923923286512229081316835827608115843952052020
            20939181871755469791156943978028386189768220475637345847
            39480796023845386548285274720892293514698570156055782459
            21902634623286894756283067095895436413579877873023753759
            35380670268539194587172110335901947278110585512880442871
            87778552126973545907790765753449566536974420096362934566
            26678096761919984119439584511111845269398239585173871776
            20050000059715276472111300380332222777609081806117725380
            35705792669836348965460790910065700480584701557479927421
            63288165678625664044418635474709624629757918820674173872
            69539539487253279387666259151375959020761891475828653180
            86912314710413714271658174241059221078105192161128780960
            995951 """),
        plain = 3**2000,
        cypher = b("""
            23380930105349125268803060044367053084239408686643096041
            66057284698108116965083901329603872144086157012574390843
            40027749781724406984689209417293472019451589843933378306
            48016564586495189511360901196010636904897477511414764280
            21302647121168014866855693270672013356299400877209702385
            28254365861134768622625019693740671381645690866223309522
            42353271464143244579356963073999248340854983948727991269
            31877816514580099261423006269592061199499771035260568370
            98292877997996647714045483172710437465562452148418493083
            46647347297497649941419786096025724268323109823240543792
            91119536719652373318800698446274966366453128776174944806
            75629912138526026279186847647760470021217081311773422918
            18554118022121003751196510897770312061013331389687780342
            06836814952358815721885324176928093959564587916469780844
            13996027835391671951675062145308353495429027206728691825
            03475272648442652882748980104214828601144402020499380886
            24253631732351429581279964622644975648918467803801427819
            05119467970564345662126072943587606217399625375390463178
            41823348704010505468781404519351658859522300711715240790
            54543901984559779346995905842471161314248959204911214623
            59579252806685227660900388412508465521621753242395314849
            40890102486348275994412502526334716607738894743250178066
            38448794032712669754053791412975468166782584723423368969
            79412551760711555160570273935158178609175610134979836216
            057998 """),
    ),

    # Created by hand, with some data from wikipedia (same as above).
    dict(
        n = 3233,
        p = 61,
        q = 53,
        e = 17,
        d = 2753,
        plain = 65 + 3233 + 65 * 3233**2,
        cypher = 2790 + 3233 + 2790 * 3233**2,
    ),

])
def test_sample(n, p, q, e, d, plain, cypher):
    key = RSA.PrivateKey(p, q, e)
    if n is not None:
        assert key.n == n
    assert key.d == d
    encrypter_priv = RSA.IntegerEncrypter(key)
    encrypter_pub = RSA.IntegerEncrypter(key.public())
    decrypter = RSA.IntegerDecrypter(key)
    assert (encrypter_priv.encrypt(plain) == cypher
            and encrypter_pub.encrypt(plain) == cypher
            and decrypter.decrypt(cypher) == plain)


# vim: et sw=4 ts=4 ft=python
